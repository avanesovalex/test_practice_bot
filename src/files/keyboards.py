from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.repositories.admin import get_all_users, get_one_user


get_phone_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìû',
                        request_contact=True)]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—Éüóí'),
            KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ãüì±')
        ],
        [KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏‚Ñπ')]
    ],
    resize_keyboard=True
)

category_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–¢–µ—Ö. –ø—Ä–æ–±–ª–µ–º–∞')],
        [KeyboardButton(text='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')],
        [KeyboardButton(text='–í–æ–ø—Ä–æ—Å'), KeyboardButton(text='–î—Ä—É–≥–æ–µ')],
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å')]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

send_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å')],
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å')]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


async def get_tags_keyboard(selected_tags=None):
    if selected_tags is None:
        selected_tags = []

    tags = [
        "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
        "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º",
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π",
        "–í–æ–ø—Ä–æ—Å –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É",
        "–ë–∞–≥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ",
        "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    ]

    buttons = []

    for i in range(0, len(tags), 3):
        row = []
        for tag in tags[i:i+3]:
            row.append(
                InlineKeyboardButton(
                    text=f'‚úÖ{tag}' if tag in selected_tags else tag,
                    callback_data=f'tag_{tag}'
                )
            )
        buttons.append(row)

    buttons.append([
        InlineKeyboardButton(text="‚û°Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                             callback_data="continue_tags"),
        InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_tags")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

admin_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='üìä–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                              callback_data='view_stats')],
        [InlineKeyboardButton(text='üìß–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
                              callback_data='send_message')],
        [InlineKeyboardButton(text='üë•–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                              callback_data='users_page_0')]
    ]
)

back_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
                              callback_data='back_to_admin_menu')]
    ]
)


async def get_users_kb(page=0, users_per_page=5) -> InlineKeyboardBuilder:
    users = await get_all_users()
    total_pages = max(1, (len(users) + users_per_page - 1) //
                      users_per_page)  # –ù–µ –º–µ–Ω—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users[page*users_per_page: (page+1)*users_per_page]:
        user_data = await get_one_user(user)
        builder.button(
            text=f'üë§{user_data[0]}',
            callback_data=f"user_detail_{user}"
        )

    builder.adjust(1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []

    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" - –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–µ—Ä–≤–∞—è
    prev_page = (page - 1) % total_pages
    pagination_buttons.append(InlineKeyboardButton(
        text="‚¨ÖÔ∏è", callback_data=f"users_page_{prev_page}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pagination_buttons.append(InlineKeyboardButton(
        text=f"{page+1}/{total_pages}", callback_data="current_page"))

    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–≤–ø–µ—Ä–µ–¥" - –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è
    next_page = (page + 1) % total_pages
    pagination_buttons.append(InlineKeyboardButton(
        text="‚û°Ô∏è", callback_data=f"users_page_{next_page}"))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.row(*pagination_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –º–µ–Ω—é"
    builder.row(InlineKeyboardButton(text="–í –º–µ–Ω—é",
                callback_data="back_to_admin_menu"))

    return builder


async def get_user_kb(user_id):
    user_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text='üë§–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', url=f"tg://user?id={user_id}")],
            [InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É',
                                  callback_data="users_page_0")]
        ]
    )
    return user_kb
