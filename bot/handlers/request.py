from aiogram import Router, F
from aiogram.filters import or_f
from aiogram.types import (Message, InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove)
from aiogram.fsm.context import FSMContext

from states import Menu, Request

router = Router()

@router.message(
    or_f(
        Request.wait_for_category,
        Request.wait_for_text,
        Request.wait_for_pic,
        Request.wait_for_send
    ),
    F.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å')
async def cancel(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—Éüóí')],
            [KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ãüì±')],
            [KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏‚Ñπ')]
        ],
        resize_keyboard=True
    )

    await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏', reply_markup=keyboard)
    await state.set_state(Menu.in_menu)

@router.message(Menu.in_menu, F.text.lower() =='–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—Éüóí')
async def get_request(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–¢–µ—Ö. –ø—Ä–æ–±–ª–µ–º–∞')],
            [KeyboardButton(text='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')],
            [KeyboardButton(text='–í–æ–ø—Ä–æ—Å'), KeyboardButton(text='–î—Ä—É–≥–æ–µ')],
            [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å')]
        ],
        resize_keyboard=True
    )
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏', reply_markup=keyboard)
    await state.set_state(Request.wait_for_category)

@router.message(Request.wait_for_category)
async def get_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ')]
        ],
        resize_keyboard=True
    )

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏', reply_markup=keyboard)
    await state.set_state(Request.wait_for_text)

@router.message(Request.wait_for_text)
async def get_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞')],
            [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å')]
        ],
        resize_keyboard=True
    )
    
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç', reply_markup=keyboard)
    await state.set_state(Request.wait_for_pic)

@router.message(Request.wait_for_pic, F.photo)
async def get_pic(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id # type: ignore
    user_data = await state.get_data()

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å')],
            [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å')]
        ],
        resize_keyboard=True
    )
    
    req_msg = (
        f'–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω! –í–æ—Ç –≤–∞—à–∞ –∑–∞—è–≤–∫–∞\n\n'
        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data['category']}\n'
        f'–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:\n{user_data['text']}'
    )

    await message.answer_photo(photo=photo_id, caption=f'{req_msg}', reply_markup=keyboard)
    await state.set_state(Request.wait_for_send)

@router.message(Request.wait_for_pic, F.text.lower() == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞')
async def no_pic(message: Message, state: FSMContext):
    user_data = await state.get_data()

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å')],
            [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å')]
        ],
        resize_keyboard=True
    )
    
    req_msg = (
        f'–í—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞! –í–æ—Ç –≤–∞—à–∞ –∑–∞—è–≤–∫–∞\n\n'
        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data['category']}\n'
        f'–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:\n{user_data['text']}'
    )

    await message.answer(f'{req_msg}', reply_markup=keyboard)
    await state.set_state(Request.wait_for_send)

@router.message(Request.wait_for_send, F.text.lower() == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
async def send_request(message: Message, state: FSMContext):
    