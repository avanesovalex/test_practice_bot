import re
import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from states import Registration, Menu
from keyboards import get_phone_kb, menu_kb
from database.repositories.user import add_user

router = Router()

@router.message(Command('start'))
async def on_start(message: Message, state: FSMContext):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º, –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüóí\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Registration.wait_for_name)

@router.message(Registration.wait_for_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 06.02.2001):')
    await state.set_state(Registration.wait_for_birthdate)

@router.message(Registration.wait_for_birthdate)
async def get_birthdate(message: Message, state: FSMContext):
    date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'

    if not re.match(date_pattern, message.text): # type: ignore
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:')
        return
    
    try:
        day, month, year = map(int, message.text.split('.')) # type: ignore
        birthdate = datetime.datetime(year, month, day)
        
        if birthdate > datetime.datetime.now():
            await message.answer('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:')
            return
        if year < 1900:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–µ —Ä–∞–Ω–µ–µ 1900):')
            return
    except ValueError as e:
        await message.answer(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {e}. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:')
        return
    
    await state.update_data(birthdate=message.text)

    await message.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********, –ª–∏–±–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ):', reply_markup=get_phone_kb)
    await state.set_state(Registration.wait_for_phone)

@router.message(Registration.wait_for_phone, F.text.startswith('+7'))
async def wrong_phone(message: Message, state: FSMContext):
    if len(message.text) == 12: # type: ignore
        phone_number = message.text
        user_data = await state.get_data()
        await add_user(message.from_user.id, user_data['name'], # type: ignore
                    user_data['birthdate'], phone_number)


        await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–§–ò–û: {user_data['name']}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birthdate']}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}', reply_markup=menu_kb)
        await state.set_state(Menu.in_menu)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:')


@router.message(Registration.wait_for_phone, F.contact)
async def get_phone(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number # type: ignore
    user_data = await state.get_data()
    await add_user(message.from_user.id, user_data['name'], # type: ignore
                   user_data['birthdate'], phone_number)


    await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–§–ò–û: {user_data['name']}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birthdate']}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}', reply_markup=menu_kb)
    await state.set_state(Menu.in_menu)

@router.message(Registration.wait_for_phone)
async def get_phone_invalid(message: Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:')
